//Script to convert a tree sequence recording file to a slim full population file
//Written by Hern√°n E. Morales - hernan.moral [at] gmail.com

initialize() {
	
	if (exists("chrSize")==0){
		defineConstant("chrSize",1e7); // intput chromsome size
	}
	
	if (exists("treeIN")==0){
		defineConstant("treeIN","~/Desktop/out_mammoth_burnin_test_Ne1000_mu1.2e-08_rho1e-08_seLen10000001.0_seed1234.tree");  // intput msprime burnin file
	}
	
	initializeMutationRate(0);
	initializeTreeSeq();
	
	// m1 mutation type: neutral
	initializeMutationType("m1", 0.5, "f", 0.0);
	
	// g1 genomic element type: uses m1 for all mutations
	initializeGenomicElementType("g1", m1, 1.0);
	
	// uniform chromosome with uniform recombination
	initializeGenomicElement(g1, 0, asInteger(chrSize));
	if (exists("roh")==0){
		defineConstant("roh",1e-8); // recombination rate
	}
	initializeRecombinationRate(roh);
}

// read tree and output slim file
1 early() {
	cat("reading tree file - " + date()+ " --" +time());
	sim.readFromPopulationFile(treeIN);
	sim.subpopulations.individuals.uniqueMutations.subpopID=1;
	CMND="echo " +treeIN + " | sed s'/.tree/_fullOut.slim/'";
	NAME=system(CMND);
	cat("output fullOUT file - " + NAME +"--" + date()+ " --" +time());
	sim.outputFull(NAME);
	sim.simulationFinished();
}

/// Print progress
1: late() {
	if(sim.generation == 1 | sim.generation % 100 ==0){
		print(date() + "\t" + time() + "\t" + "generation: " + sim.generation + "\t" + "N: " + sim.subpopulations.individualCount+ "  memory usage: "+usage()/1000+"Gb");
	}
}
